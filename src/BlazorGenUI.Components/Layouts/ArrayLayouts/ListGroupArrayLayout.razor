@using BlazorGenUI.Reflection.ValueElementTypes
<h3>ListGroupArrayLayout</h3>



<div class="list-group">

    @RenderItem()
</div>


@code {
    [Parameter]
    public ArrayElement ArrayElement { get; set; }

    [Parameter]
    public string NavigationPrefix { get; set; }

    [Parameter]
    public string NavigationPropertyName { get; set; }
    [Parameter]
    public string DisplayedPropertyName { get; set; }

    public IEnumerable<IComplexElement> Items { get; set; }

  

    public RenderFragment RenderItem() => __builder =>
    {
        Items = (IComplexElement[])ArrayElement.GetItems();
        @foreach (var item in Items)
        {
            var selectedChild = GetValueElementByRawName(item, DisplayedPropertyName);
            var id = GetValueElementByRawName(item, NavigationPropertyName);
            if (selectedChild is IValueElement valueElement && id is IValueElement valueId)
            {
                var href = $"{NavigationPrefix}{valueId.RawData}";
                <a href="@href" class="list-group-item list-group-item-action">@valueElement.RawData</a>
            }
        }
    };


    private IBaseElement GetValueElementByRawName(IComplexElement item, string rawName)
    {
       
        return item.GetChildren().First(x => x.RawName == rawName);

    }

    

}